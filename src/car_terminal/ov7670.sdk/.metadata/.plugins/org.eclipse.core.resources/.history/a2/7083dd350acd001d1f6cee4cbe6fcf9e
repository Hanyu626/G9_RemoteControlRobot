/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "string.h"

#include "xuartlite.h"
#include "xuartlite_l.h"
#include "xintc.h"
#include "xparameters.h"

#include "helloworld.h"
#include <math.h>

#define FRAME_BASE 0xC0000000
#define GPIO_BUTTON_BASE_ADDR 0x40000000
#define GPIO_CTRLOUT_BASE_ADDR 0x40010000
#define GPIO_CTRLIN_BASE_ADDR 0x40020000

#define BT_PACKAGE_SIZE 9

#define UARTLITE_DEVICE_ID XPAR_AXI_UARTLITE_BT_DEVICE_ID

XIntc InterruptController;
XUartLite UartLite;
int UartStatus = 0;

uint8_t RecvBuffer[BT_PACKAGE_SIZE];

struct bt_ctrl_package curr_js;

volatile unsigned int * frame = (unsigned int *)FRAME_BASE;

volatile unsigned int* but = (unsigned int*) GPIO_BUTTON_BASE_ADDR;
volatile unsigned int* ctrl_out = (unsigned int*) GPIO_CTRLOUT_BASE_ADDR;
volatile unsigned int* ctrl_in = (unsigned int*) GPIO_CTRLIN_BASE_ADDR;

void RBUTTON_Handler();
void LBUTTON_Handler();
void UBUTTON_Handler();
void DBUTTON_Handler();
void CBUTTON_Handler();
void fake_delay(int num);
void SendHandler(void *CallBackRef, unsigned int EventData);
void RecvHandler(void *CallBackRef, unsigned int EventData);
void print_js_state(const struct bt_ctrl_package js_state);

////////////////////
#define PWM_BASE_ADDR 0X44A00000
#define PWM_LOAD_REG 0
#define PWM_L_CMP_REG 4
#define PWM_CTRL_REG 8
#define PWM_R_CMP_REG 12
#define load 128
void inital_pwm();
void pwmcontrol(struct bt_ctrl_package ctrl);
void disenable_pwm ();

int SetupInterruptSystem(XUartLite *UartLitePtr, XIntc * Intc, u16 device_id, u16 int_irq_id);

////////////////////

int main()
{
    init_platform();

    xil_printf("Hello World\n");

    UartStatus = XUartLite_Initialize(&UartLite, 1);
	if (UartStatus != XST_SUCCESS) {
		xil_printf("Initialization Failed\n");
	}

	UartStatus = SetupInterruptSystem(&UartLite, &InterruptController, 0, XPAR_MICROBLAZE_0_AXI_INTC_AXI_UARTLITE_BT_INTERRUPT_INTR);
	if (UartStatus != XST_SUCCESS) {
		xil_printf("Interrupt Setup Failed\n");
	}

	XUartLite_SetSendHandler(&UartLite, SendHandler, &UartLite);
	XUartLite_SetRecvHandler(&UartLite, RecvHandler, &UartLite);


	XUartLite_EnableInterrupt(&UartLite);

    XUartLite_Recv(&UartLite, RecvBuffer, BT_PACKAGE_SIZE);

    //Variables declaration
	uint32_t prev_button_state = 0;
	uint32_t curr_button_state = 0;

	*ctrl_out = 0x1;
	*ctrl_out = 0x0;

	inital_pwm ();

	while (1) {
		prev_button_state = curr_button_state;
		curr_button_state = (*but) & 0x001F; // Get the least significant 5 bits


		uint32_t button_rise_reg = ((~prev_button_state) & 0x1F) & curr_button_state;
		void (*button_callback[5])() = {CBUTTON_Handler, UBUTTON_Handler, LBUTTON_Handler, RBUTTON_Handler, DBUTTON_Handler};
		for (int i = 0; i < 5; i++) {
			if ((1 << i) & button_rise_reg) {
				 (*button_callback[i])();
			}
		}
		print_js_state(curr_js);
		pwmcontrol(curr_js);
    }



    cleanup_platform();
    return 0;
}

void SendHandler(void *CallBackRef, unsigned int EventData) {
	//xil_printf("XendHandler\n");
}

void RecvHandler(void *CallBackRef, unsigned int EventData) {
	XUartLite_Recv(&UartLite, RecvBuffer, 0); // Stop the incoming data

	curr_js.verify = (u8)RecvBuffer[0];
	curr_js.bt0 = (u8)RecvBuffer[1];
	curr_js.bt1 = (u8)RecvBuffer[2];
	curr_js.l_lr = (u8)RecvBuffer[3];
	curr_js.l_ud = (u8)RecvBuffer[4];
	curr_js.r_lr = (u8)RecvBuffer[5];
	curr_js.r_ud = (u8)RecvBuffer[6];
	curr_js.lt = (u8)RecvBuffer[7];
	curr_js.rt = (u8)RecvBuffer[8];

	XUartLite_ResetFifos(&UartLite); // Reset the FIFOs
	XUartLite_Recv(&UartLite, RecvBuffer, BT_PACKAGE_SIZE); // Restart incoming data receiving
}


void RBUTTON_Handler() {

	xil_printf("RBUTTON_Handler\n");
	return;
}

void DBUTTON_Handler() {
	char temp[5];
	sprintf(temp, "STA\n");
	xil_printf(temp);
	XUartLite_Send(&UartLite, (u8*)temp, 4);
	while(XUartLite_IsSending(&UartLite)){
	}

	fake_delay(10000);

	for (int i = 0; i < 60; i++) {
		for (int j = 0; j < 80; j++) {
			char str_tmp[5];
			sprintf(str_tmp, "%x\n", (int)(*(frame+ i*320 + j)));
			xil_printf(str_tmp);
			XUartLite_Send(&UartLite, (u8*)str_tmp, 4);
			while(XUartLite_IsSending(&UartLite)){
			}
			fake_delay(10000);
		}
	}

	sprintf(temp, "END\n");
	xil_printf(temp);
	XUartLite_Send(&UartLite, (u8*)temp, 4);
	while(XUartLite_IsSending(&UartLite)){
	}


	fake_delay(10000);
	xil_printf("DBUTTON_Handler\n");
	return;
}

void fake_delay(int num) {
	volatile int bullshit = 0;
	for (volatile int i = 0; i < 10000; i++) {
		bullshit += 1;
	}

}

void LBUTTON_Handler() {
	xil_printf("LBUTTON_Handler\n");
	return;
}

void UBUTTON_Handler() {
	*ctrl_out = 0x2;
	volatile int bullshit = 0;
	for (volatile int i = 0; i < 1000000; i++) {
		bullshit += 1;
	}
	*ctrl_out = 0x0;

	xil_printf("UBUTTON_Handler\n");
	return;
}

void CBUTTON_Handler() {
	*ctrl_out = 0x1;
	*ctrl_out = 0x0;
	xil_printf("CBUTTON_Handler\n");
	return;
}

void pwmcontrol(struct bt_ctrl_package ctrl){

	int abs_lr_ctrl = 0;
	int duty_cycle=0;
	int abs_ud_ctrl = 0;

	if(ctrl.r_ud < (u8)126 ){
		abs_ud_ctrl = 128 - ctrl.r_ud;
		if (ctrl.r_lr > (u8)128){
			abs_lr_ctrl = ctrl.r_lr - 128; // F R
			//xil_printf("%d \n",abs_lr_ctrl);
			duty_cycle = (int) sqrt( abs_lr_ctrl*abs_lr_ctrl + abs_ud_ctrl*abs_ud_ctrl);
			Xil_Out32((PWM_BASE_ADDR) + (PWM_L_CMP_REG), (u32)(duty_cycle));
			Xil_Out32((PWM_BASE_ADDR) + (PWM_R_CMP_REG), (u32)(duty_cycle-abs_lr_ctrl*0.65));
			Xil_Out32((PWM_BASE_ADDR) + (PWM_CTRL_REG), (u32)(0b1111));
		}
		else if (ctrl.r_lr < (u8)128){
			abs_lr_ctrl = 128 - ctrl.r_lr; //F L
			duty_cycle = (int) sqrt(abs_lr_ctrl*abs_lr_ctrl + abs_ud_ctrl*abs_ud_ctrl);
			Xil_Out32((PWM_BASE_ADDR) + (PWM_L_CMP_REG), (u32)(duty_cycle-abs_lr_ctrl*0.65));
			Xil_Out32((PWM_BASE_ADDR) + (PWM_R_CMP_REG), (u32)(duty_cycle));
			Xil_Out32((PWM_BASE_ADDR) + (PWM_CTRL_REG), (u32)(0b1111));
		}

	}
	else if (ctrl.r_ud > (u8)130){
		abs_ud_ctrl = 128 - ctrl.r_ud;
		if (ctrl.r_lr >= (u8)128){
			abs_lr_ctrl = ctrl.r_lr - 128; // F R
			duty_cycle = (int) sqrt(abs_lr_ctrl*abs_lr_ctrl + abs_ud_ctrl*abs_ud_ctrl);
			Xil_Out32((PWM_BASE_ADDR) + (PWM_L_CMP_REG), (u32)(duty_cycle));
			Xil_Out32((PWM_BASE_ADDR) + (PWM_R_CMP_REG), (u32)(duty_cycle-abs_lr_ctrl*0.65));
			Xil_Out32((PWM_BASE_ADDR) + (PWM_CTRL_REG), (u32)(0b0101));
		}
		else if (ctrl.r_lr < (u8)128){
			abs_lr_ctrl = 128 - ctrl.r_lr; //F L
			duty_cycle = (int) sqrt(abs_lr_ctrl*abs_lr_ctrl + abs_ud_ctrl*abs_ud_ctrl);
			Xil_Out32((PWM_BASE_ADDR) + (PWM_L_CMP_REG), (u32)(duty_cycle-abs_lr_ctrl*0.65));
			Xil_Out32((PWM_BASE_ADDR) + (PWM_R_CMP_REG), (u32)(duty_cycle));
			Xil_Out32((PWM_BASE_ADDR) + (PWM_CTRL_REG), (u32)(0b0101));
		}
	}
	else{
		Xil_Out32((PWM_BASE_ADDR) + (PWM_CTRL_REG), (u32)(0b0000));
	}


	return;

}

void inital_pwm (){
	Xil_Out32((PWM_BASE_ADDR) + (PWM_CTRL_REG), (u32)(0));
	Xil_Out32((PWM_BASE_ADDR) + (PWM_LOAD_REG), (u32)(load));

	return;

}
void disenable_pwm (){

	Xil_Out32((PWM_BASE_ADDR) + (PWM_CTRL_REG), (u32)(0b0000));
}


int SetupInterruptSystem(XUartLite *UartLitePtr, XIntc * Intc, u16 device_id, u16 int_irq_id) {
	int Status;

	/*
	 * Initialize the interrupt controller driver so that it is ready to
	 * use.
	 */
	Status = XIntc_Initialize(Intc, device_id);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}


	/*
	 * Connect a device driver handler that will be called when an interrupt
	 * for the device occurs, the device driver handler performs the
	 * specific interrupt processing for the device.
	 */
	Status = XIntc_Connect(Intc, int_irq_id,
			   (XInterruptHandler)XUartLite_InterruptHandler,
			   (void *)UartLitePtr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Start the interrupt controller such that interrupts are enabled for
	 * all devices that cause interrupts, specific real mode so that
	 * the UartLite can cause interrupts through the interrupt controller.
	 */
	Status = XIntc_Start(Intc, XIN_REAL_MODE);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Enable the interrupt for the UartLite device.
	 */
	XIntc_Enable(Intc, int_irq_id);

	/*
	 * Initialize the exception table.
	 */
	Xil_ExceptionInit();

	/*
	 * Register the interrupt controller handler with the exception table.
	 */
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			 (Xil_ExceptionHandler)XIntc_InterruptHandler,
			 Intc);

	/*
	 * Enable exceptions.
	 */
	Xil_ExceptionEnable();

	return XST_SUCCESS;
}

void print_js_state(const struct bt_ctrl_package js_state) {

	xil_printf("||");

	xil_printf("EN:%d ", js_state.verify);

	char bt0_name[5] = {'A', 'B', 'X', 'Y'};
	for (int i = 0; i < 4; i++) {
		xil_printf("%c:", bt0_name[i]);
		if (js_state.bt0 & (1 << i)) {
			xil_printf("1 ");
		} else {
			xil_printf("0 ");
		}
	}

	char bt1_name[7] = {'L', 'R', 'W', 'M', 'P', 'Q'};
	for (int i = 0; i < 6; i++) {
		xil_printf("%c:", bt1_name[i]);
		if (js_state.bt1 & (1 << i)) {
			xil_printf("1 ");
		} else {
			xil_printf("0 ");
		}
	}

	xil_printf("LLR:");
	xil_printf("%-4d", js_state.l_lr);

	xil_printf("LUD:");
	xil_printf("%-4d", js_state.l_ud);

	xil_printf("RLR:");
	xil_printf("%-4d", js_state.r_lr);

	xil_printf("RUD:");
	xil_printf("%-4d", js_state.r_ud);

	xil_printf("LT:");
	xil_printf("%-4d", js_state.lt);

	xil_printf("RT:");
	xil_printf("%-4d", js_state.rt);

	xil_printf(" ||\n");

}
