/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include "platform.h"
#include "xil_printf.h"

#include "helloworld.h"

#include "xuartlite.h"
#include "xuartlite_l.h"
#include "xintc.h"
#include "xparameters.h"
#include "string.h"

#define BT_PACKAGE_SIZE 4
#define USB_PACKAGE_SIZE 9

#define GPIO_BUTTON_BASE_ADDR 0x40000000
#define FRAME_BASE 0xC0000000
volatile unsigned int * frame = (unsigned int *)FRAME_BASE;
volatile unsigned int* but = (unsigned int*) GPIO_BUTTON_BASE_ADDR;

XUartLite UartLite_BT;
int UartStatus = 0;

XUartLite UartLite_USB;
int UartUSBStatus = 0;

XIntc InterruptController_BT;
XIntc InterruptController_USB;

struct bt_ctrl_package curr_js;

u8 RecvBuffer_BT [BT_PACKAGE_SIZE];
u8 RecvBuffer_USB  [USB_PACKAGE_SIZE];

int is_new_recv = 0;
int recv_count = 0;

void RBUTTON_Handler();
void LBUTTON_Handler();
void UBUTTON_Handler();
void DBUTTON_Handler();
void CBUTTON_Handler();

void fake_delay(int num);
int SetupInterruptSystem(XUartLite *UartLitePtr, XIntc * Intc, u16 device_id, u16 int_irq_id);
void RecvHandler_BT(void *CallBackRef, unsigned int EventData);
void SendHandler_BT(void *CallBackRef, unsigned int EventData);

void RecvHandler_USB(void *CallBackRef, unsigned int EventData);
void SendHandler_USB(void *CallBackRef, unsigned int EventData);
void print_js_state(const struct bt_ctrl_package js_state);

void send_js_state_via_bt(struct bt_ctrl_package js);
int uart_init();

void teleop_mode();
void recv_mode();

int op_mode = 0; // 0-teleop; 1-transmit
int prev_op_mode = 1;


int main()
{
    init_platform();

    xil_printf("Hello World\n");

    for (int i = 0; i < 4800; i++) {
    	*(frame + i) = 0;
    }

	uint32_t prev_button_state = 0;
	uint32_t curr_button_state = 0;

    uart_init();

    while(1) {
    	prev_button_state = curr_button_state;
		curr_button_state = (*but) & 0x001F; // Get the least significant 5 bits


		uint32_t button_rise_reg = ((~prev_button_state) & 0x1F) & curr_button_state;
		void (*button_callback[5])() = {CBUTTON_Handler, UBUTTON_Handler, LBUTTON_Handler, RBUTTON_Handler, DBUTTON_Handler};
		for (int i = 0; i < 5; i++) {
			if ((1 << i) & button_rise_reg) {
				 (*button_callback[i])();
			}
		}


    	if (prev_op_mode != op_mode) {
    		// mode switch!
    		prev_op_mode = op_mode;
    		xil_printf("Changed OPMODE: %d\n", op_mode);

    		fake_delay(100000);
    		if (op_mode == 0) {
    			// disable the bluetooth interrupt
    			XUartLite_DisableInterrupt(&UartLite_BT);

    			// enable the usb interrupt
    			XUartLite_EnableInterrupt(&UartLite_USB);

    			// restart the usb receive.
    			XUartLite_Recv(&UartLite_USB, RecvBuffer_USB, 0); // Stop the incoming data
    			XUartLite_ResetFifos(&UartLite_USB); // Reset the FIFOs
    			XUartLite_Recv(&UartLite_USB, RecvBuffer_USB, USB_PACKAGE_SIZE); // Restart incoming data receiving

    			fake_delay(100000);
    		} else {
    			// disable the usb interrupt
				XUartLite_DisableInterrupt(&UartLite_USB);

				// initialize the frame
				for (int i = 0; i < 4800; i++) {
					*(frame + i) = 0;
				}

				// initialize the flags and counters
				is_new_recv = 0;
				recv_count = 0;

				// enable the bluetooth interrupt
				XUartLite_EnableInterrupt(&UartLite_BT);

				XUartLite_Recv(&UartLite_BT, RecvBuffer_BT, 0); // Stop the incoming data
				XUartLite_ResetFifos(&UartLite_BT); // Reset the FIFOs
				XUartLite_Recv(&UartLite_BT, RecvBuffer_BT, BT_PACKAGE_SIZE); // Restart incoming data receiving

				fake_delay(100000);
    		}
    	}

    	if (op_mode == 0) {
    		teleop_mode();
    	} else if (op_mode == 1) {
    		recv_mode();
    	}
    }

    cleanup_platform();
    return 0;
}

void teleop_mode() {
	fake_delay(500000);
	print_js_state(curr_js);
	send_js_state_via_bt(curr_js);
}

void recv_mode() {
}

void send_js_state_via_bt(struct bt_ctrl_package js) {
	// disable usb interrupt when sending bluetooth
	XUartLite_DisableInterrupt(&UartLite_USB);

	uint8_t js_bytes[9];

	js_bytes[0] = js.verify;
	js_bytes[1] = js.bt0;
	js_bytes[2] = js.bt1;
	js_bytes[3] = js.l_lr;
	js_bytes[4] = js.l_ud;
	js_bytes[5] = js.r_lr;
	js_bytes[6] = js.r_ud;
	js_bytes[7] = js.lt;
	js_bytes[8] = js.rt;

	XUartLite_ResetFifos(&UartLite_BT); // Reset the FIFOs
	XUartLite_Send(&UartLite_BT, js_bytes, 9);
	while(XUartLite_IsSending(&UartLite_BT)) {}

	// enable usb interrupt when sending bluetooth
	XUartLite_EnableInterrupt(&UartLite_USB);

	// restart the usb receive.
	XUartLite_Recv(&UartLite_USB, RecvBuffer_USB, 0); // Stop the incoming data
	XUartLite_ResetFifos(&UartLite_USB); // Reset the FIFOs
	XUartLite_Recv(&UartLite_USB, RecvBuffer_USB, USB_PACKAGE_SIZE); // Restart incoming data receiving
}

int uart_init() {
	UartStatus = XUartLite_Initialize(&UartLite_BT, 1);
	if (UartStatus != XST_SUCCESS) {
		xil_printf("Initialization Failed\n");
	}

	UartStatus = XUartLite_Initialize(&UartLite_USB, 0);
	if (UartStatus != XST_SUCCESS) {
		xil_printf("Initialization Failed\n");
	}

	int Status = XIntc_Initialize(&InterruptController_USB, 0);
	if (Status != XST_SUCCESS) {
		xil_printf("1\n");
		return XST_FAILURE;
	}

	Status = XIntc_Connect(&InterruptController_USB, XPAR_MICROBLAZE_0_AXI_INTC_AXI_UARTLITE_0_INTERRUPT_INTR,
			(XInterruptHandler)XUartLite_InterruptHandler,
			(void *)&UartLite_USB);
	if (Status != XST_SUCCESS) {
			xil_printf("2\n");
			return XST_FAILURE;
	}

	Status = XIntc_Connect(&InterruptController_USB, XPAR_MICROBLAZE_0_AXI_INTC_AXI_UARTLITE_BT_INTERRUPT_INTR,
			(XInterruptHandler)XUartLite_InterruptHandler,
			(void *)&UartLite_BT);
	if (Status != XST_SUCCESS) {
		xil_printf("3\n");
		return XST_FAILURE;
	}

	Status = XIntc_Start(&InterruptController_USB, XIN_REAL_MODE);
	if (Status != XST_SUCCESS) {
		xil_printf("3\n");
		return XST_FAILURE;
	}


	XIntc_Enable(&InterruptController_USB, XPAR_MICROBLAZE_0_AXI_INTC_AXI_UARTLITE_0_INTERRUPT_INTR);
	XIntc_Enable(&InterruptController_USB, XPAR_MICROBLAZE_0_AXI_INTC_AXI_UARTLITE_BT_INTERRUPT_INTR);

	Xil_ExceptionInit();

	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			 (Xil_ExceptionHandler)XIntc_InterruptHandler,
			 &InterruptController_USB);


	Xil_ExceptionEnable();

	XUartLite_SetSendHandler(&UartLite_BT, SendHandler_BT, &UartLite_BT);
	XUartLite_SetRecvHandler(&UartLite_BT, RecvHandler_BT, &UartLite_BT);
	XUartLite_SetRecvHandler(&UartLite_USB, RecvHandler_USB, &UartLite_USB);

	XUartLite_EnableInterrupt(&UartLite_BT);
	XUartLite_EnableInterrupt(&UartLite_USB);

	xil_printf("UART_Bluetooth Base address is: 0x%08x\n", UartLite_BT.RegBaseAddress);
	xil_printf("UART_USB Base address is: 0x%08x\n", UartLite_USB.RegBaseAddress);

	XUartLite_Recv(&UartLite_BT, RecvBuffer_BT, BT_PACKAGE_SIZE);
	XUartLite_Recv(&UartLite_USB, RecvBuffer_USB, USB_PACKAGE_SIZE);

	return XST_SUCCESS;
}

void RecvHandler_USB(void *CallBackRef, unsigned int EventData) {
	XUartLite_Recv(&UartLite_USB, RecvBuffer_USB, 0); // Stop the incoming data

	if ((u8)RecvBuffer_USB[0] != 255) {
		XUartLite_ResetFifos(&UartLite_USB); // Reset the FIFOs
		XUartLite_Recv(&UartLite_USB, RecvBuffer_USB, USB_PACKAGE_SIZE); // Restart incoming data receiving
	}

	curr_js.verify = (u8)RecvBuffer_USB[0];
	curr_js.bt0 = (u8)RecvBuffer_USB[1];
	curr_js.bt1 = (u8)RecvBuffer_USB[2];
	curr_js.l_lr = (u8)RecvBuffer_USB[3];
	curr_js.l_ud = (u8)RecvBuffer_USB[4];
	curr_js.r_lr = (u8)RecvBuffer_USB[5];
	curr_js.r_ud = (u8)RecvBuffer_USB[6];
	curr_js.lt = (u8)RecvBuffer_USB[7];
	curr_js.rt = (u8)RecvBuffer_USB[8];

	XUartLite_ResetFifos(&UartLite_USB); // Reset the FIFOs
	XUartLite_Recv(&UartLite_USB, RecvBuffer_USB, USB_PACKAGE_SIZE); // Restart incoming data receiving
}

void SendHandler_USB(void *CallBackRef, unsigned int EventData) {

}

void RecvHandler_BT(void *CallBackRef, unsigned int EventData) {
	XUartLite_Recv(&UartLite_BT, RecvBuffer_BT, 0); // Stop the incoming data

	//xil_printf(RecvBuffer_BT);

	if ((char)RecvBuffer_BT[0] == 'S') {
		is_new_recv = 1;
	} else if ((char)RecvBuffer_BT[1] == 'N') {
		is_new_recv = 0;
	} else if (is_new_recv) {

		RecvBuffer_BT[3] = 0;
		int temp = 0;
		//xil_printf((char*)RecvBuffer_BT);
		temp = (int)strtol((char*)RecvBuffer_BT, NULL, 16);       // number base 16

		//xil_printf("hex: %x\n count: %d\n === \n", temp, recv_count);

		*(frame + recv_count) = temp;

		recv_count++;
		xil_printf("%d, %x\n", recv_count, temp);
	}

	XUartLite_ResetFifos(&UartLite_BT); // Reset the FIFOs
	XUartLite_Recv(&UartLite_BT, RecvBuffer_BT, BT_PACKAGE_SIZE); // Restart incoming data receiving
}

void SendHandler_BT(void *CallBackRef, unsigned int EventData) {
	//xil_printf("send\n");
}

void fake_delay(volatile int num) {
	volatile int bullshit = 0;
	for (volatile int i = 0; i < num; i++) {
		bullshit += 1;
	}
}

int SetupInterruptSystem(XUartLite *UartLitePtr, XIntc * Intc, u16 device_id, u16 int_irq_id) {
	int Status;

	/*
	 * Initialize the interrupt controller driver so that it is ready to
	 * use.
	 */
	Status = XIntc_Initialize(Intc, device_id);
	if (Status != XST_SUCCESS) {
		xil_printf("1\n");
		return XST_FAILURE;
	}


	/*
	 * Connect a device driver handler that will be called when an interrupt
	 * for the device occurs, the device driver handler performs the
	 * specific interrupt processing for the device.
	 */
	Status = XIntc_Connect(Intc, int_irq_id,
			   (XInterruptHandler)XUartLite_InterruptHandler,
			   (void *)UartLitePtr);
	if (Status != XST_SUCCESS) {
		xil_printf("2\n");
		return XST_FAILURE;
	}

	/*
	 * Start the interrupt controller such that interrupts are enabled for
	 * all devices that cause interrupts, specific real mode so that
	 * the UartLite can cause interrupts through the interrupt controller.
	 */
	Status = XIntc_Start(Intc, XIN_REAL_MODE);
	if (Status != XST_SUCCESS) {
		xil_printf("3\n");
		return XST_FAILURE;
	}

	/*
	 * Enable the interrupt for the UartLite device.
	 */
	XIntc_Enable(Intc, int_irq_id);

	/*
	 * Initialize the exception table.
	 */
	Xil_ExceptionInit();

	/*
	 * Register the interrupt controller handler with the exception table.
	 */
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			 (Xil_ExceptionHandler)XIntc_InterruptHandler,
			 Intc);

	/*
	 * Enable exceptions.
	 */
	Xil_ExceptionEnable();

	return XST_SUCCESS;
}

void print_js_state(const struct bt_ctrl_package js_state) {

	xil_printf("||");

	xil_printf("EN:%d ", js_state.verify);

	char bt0_name[5] = {'A', 'B', 'X', 'Y'};
	for (int i = 0; i < 4; i++) {
		xil_printf("%c:", bt0_name[i]);
		if (js_state.bt0 & (1 << i)) {
			xil_printf("1 ");
		} else {
			xil_printf("0 ");
		}
	}

	char bt1_name[7] = {'L', 'R', 'W', 'M', 'P', 'Q'};
	for (int i = 0; i < 6; i++) {
		xil_printf("%c:", bt1_name[i]);
		if (js_state.bt1 & (1 << i)) {
			xil_printf("1 ");
		} else {
			xil_printf("0 ");
		}
	}

	xil_printf("LLR:");
	xil_printf("%-4d", js_state.l_lr);

	xil_printf("LUD:");
	xil_printf("%-4d", js_state.l_ud);

	xil_printf("RLR:");
	xil_printf("%-4d", js_state.r_lr);

	xil_printf("RUD:");
	xil_printf("%-4d", js_state.r_ud);

	xil_printf("LT:");
	xil_printf("%-4d", js_state.lt);

	xil_printf("RT:");
	xil_printf("%-4d", js_state.rt);

	xil_printf(" ||\n");

}


void RBUTTON_Handler() {
	xil_printf("RBUTTON_Handler\n");
}
void LBUTTON_Handler() {
	xil_printf("LBUTTON_Handler\n");
}
void UBUTTON_Handler() {
	op_mode = 0;
	xil_printf("OPMODE: 0\n");
	xil_printf("UBUTTON_Handler\n");
}
void DBUTTON_Handler() {
	op_mode = 1;
	xil_printf("OPMODE: 1\n");
	xil_printf("DBUTTON_Handler\n");
}
void CBUTTON_Handler() {
	if (op_mode == 1) {

	}
	xil_printf("CBUTTON_Handler\n");
}
